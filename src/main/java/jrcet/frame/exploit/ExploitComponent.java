package jrcet.frame.exploit;

import jrcet.diycomponents.DiyJComponent;
import jrcet.frame.exploit.php.PbootCMS;
import jrcet.frame.exploit.php.ThinkPHP;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.Objects;

public class ExploitComponent extends DiyJComponent {

    public JPanel exploitPanel = new JPanel(null);
    private String[] targetList ={"ThinkPHP", "PbootCMS"};
    JComboBox<String> targetListBox = new JComboBox<>(targetList);
    private final JLabel nowSelectText=new JLabel();

    public ExploitComponent(){
        exploitPanel.setName("Tools");
        exploitPanel.setBounds(0,25,800,600);
    }

    public JComponent main(){

//         大类列表
        JLabel typeText=new JLabel("大类：");
        typeText.setBounds(10,0,40,30);
        exploitPanel.add(typeText);

        String[] typeList ={"PHP","Java","Python","Nodejs","Other"};
        JComboBox<String> typeListBox = new JComboBox<>(typeList);
        typeListBox.setBounds(40,1,200,30);
        typeListBox.addActionListener(e -> {
            JComboBox tmpComboBox = (JComboBox)e.getSource();
            String selectedItem =  (String) tmpComboBox.getSelectedItem();
            String[] tmpTargetList;
            switch (Objects.requireNonNull(selectedItem)){
                case  "PHP":
                    tmpTargetList = new String[]{"ThinkPHP", "PbootCMS"};
                    if(!Arrays.equals(tmpTargetList,targetList)){
                        targetListBox.removeAllItems();
                        targetList=tmpTargetList;
                        for (String s : tmpTargetList) {
                            targetListBox.addItem(s);
                        }
                    }
                    break;
                case "Java":
                    tmpTargetList = new String[]{"Shiro", "FastJson"};
                    if(!Arrays.equals(tmpTargetList,targetList)){
                        targetListBox.removeAllItems();
                        targetList=tmpTargetList;
                        for (String s : tmpTargetList) {
                            targetListBox.addItem(s);
                        }
                    }
                    break;
                case "Python":
                case "Nodejs":
                case "Other":
                    break;
            }
        });
        exploitPanel.add(typeListBox);

        // 小类列表
        JLabel targetText=new JLabel("小类：");
        targetText.setBounds(270,0,40,30);
        exploitPanel.add(targetText);

        targetListBox.setBounds(300,1,200,30);
        targetListBox.setSelectedItem("PbootCMS");
        centerTopJComboBoxListener(targetListBox);
        exploitPanel.add(targetListBox);

        // nowSelectText显示列表当前选择的模式，被定义为了属性，方便JComboBox的ActionListener设置text。
        nowSelectText.setBounds(530,0,270,30);
        nowSelectText.setText("当前选择："+targetListBox.getSelectedItem());
        exploitPanel.add(nowSelectText);

        //地址框
        JPanel urlPanel=new JPanel(null);
        urlPanel.setBounds(0,30,800,30);
        urlPanel.setBorder(BorderFactory.createMatteBorder(1,0,0,0,new Color(203,208,209)));
        exploitPanel.add(urlPanel);

        JLabel urlText=new JLabel("地址：");
        urlText.setBounds(10,0,40,30);
        urlPanel.add(urlText);

        JTextField urlField = new JTextField();
        urlField.setBounds(40,0,760,30);
        urlPanel.add(urlField);

        //设置默认面板
        DiyJComponent defaultExploitPanel = new PbootCMS();
        exploitPanel.add(defaultExploitPanel.main());
        return exploitPanel;
    }

    private void centerTopJComboBoxListener(JComboBox<String> tmpJComboBox){
        tmpJComboBox.addActionListener(e -> {
            JComboBox tmpComboBox = (JComboBox)e.getSource();
            String selectedItem =  (String) tmpComboBox.getSelectedItem();
            nowSelectText.setText("当前选择："+selectedItem);
//            System.out.println(selectedItem);
            if(!Objects.equals(selectedItem, null)){
//                System.out.println(selectedItem);
                switch (Objects.requireNonNull(selectedItem)){
                    case "ThinkPHP":
                        ThinkPHP();
                        break;
                    case "PbootCMS":
                        PbootCMS();
                        break;
                    case "Shiro":
                        Shiro();
                        break;
                    case "FastJson":
                        FastJson();
                        break;
                }
            }
        });
    }

    public void ThinkPHP(){
        System.out.println("ThinkPHP");
        setExploitPanel(exploitPanel,new ThinkPHP());
    }

    public void PbootCMS(){
        System.out.println("PbootCMS");
        setExploitPanel(exploitPanel,new PbootCMS());
    }

    public void Shiro(){
        System.out.println("Shiro");
    }

    public void FastJson(){
        System.out.println("FastJson");
    }

    private void setExploitPanel(JPanel exploitPanel, DiyJComponent willLoadedPanel){
        Component[] exploitPanelComponents=exploitPanel.getComponents();
//        System.out.println(exploitPanelComponents.length);
        if(exploitPanelComponents.length==7){
            exploitPanel.remove(6);
            exploitPanel.add(willLoadedPanel.main());
            exploitPanel.revalidate();
            exploitPanel.repaint();
        }
    }

}

