package jrcet.frame.exploit;

import javafx.scene.layout.Pane;
import jrcet.diycomponents.DiyJComponent;
import jrcet.frame.exploit.php.PbootCMS;
import jrcet.frame.exploit.php.ThinkPHP;

import javax.swing.*;
import java.awt.*;
import java.util.Arrays;
import java.util.GregorianCalendar;
import java.util.Objects;

public class ExploitComponent extends DiyJComponent {

    public JPanel exploitPanel = new JPanel(new GridBagLayout());
    private String[] targetList ={"ThinkPHP", "PbootCMS"};
    private final JLabel nowSelectText=new JLabel();
    private JComboBox<String> targetListBox;
    public ExploitComponent(){
    }

    public JComponent main(){
        exploitPanel.setOpaque(true);
        exploitPanel.setBackground(Color.BLUE);
        GridBagConstraints gbc = new GridBagConstraints(0,0,0,0,0,0,0,0,new Insets(0,0,0,0),0,0);
        GridBagConstraints gbc1 = new GridBagConstraints();
        gbc1.gridy=0; gbc1.gridx=0;
        gbc1.weightx=0; gbc1.weighty=0;
        gbc1.fill = GridBagConstraints.BOTH;
        exploitPanel.add(exploitTopPanel(),gbc1);


        GridBagConstraints gbc2 = new GridBagConstraints();
        gbc2.gridy=1;gbc2.gridx=0;
        gbc2.weightx=100;gbc2.weighty=100;
        gbc2.fill = GridBagConstraints.BOTH;
        exploitPanel.add(exploitContentPanel(),gbc2);

//        GridBagConstraints gbc2 = new GridBagConstraints();
//        gbc2.gridy=0; gbc2.gridx=1;

//        typeListBox.addActionListener(e -> {
//            JComboBox tmpComboBox = (JComboBox)e.getSource();
//            String selectedItem =  (String) tmpComboBox.getSelectedItem();
//            String[] tmpTargetList;
//            switch (Objects.requireNonNull(selectedItem)){
//                case  "PHP":
//                    tmpTargetList = new String[]{"ThinkPHP", "PbootCMS"};
//                    if(!Arrays.equals(tmpTargetList,targetList)){
//                        targetListBox.removeAllItems();
//                        targetList=tmpTargetList;
//                        for (String s : tmpTargetList) {
//                            targetListBox.addItem(s);
//                        }
//                    }
//                    break;
//                case "Java":
//                    tmpTargetList = new String[]{"Shiro", "FastJson"};
//                    if(!Arrays.equals(tmpTargetList,targetList)){
//                        targetListBox.removeAllItems();
//                        targetList=tmpTargetList;
//                        for (String s : tmpTargetList) {
//                            targetListBox.addItem(s);
//                        }
//                    }
//                    break;
//                case "Python":
//                case "Nodejs":
//                case "Other":
//                    break;
//            }
//        });

//
//        GridBagConstraints gbc4 = new GridBagConstraints();
//        gbc4.gridy=0; gbc4.gridx=3;
//        targetListBox.setSelectedItem("PbootCMS");
////        centerTopJComboBoxListener(targetListBox);
//        exploitPanel.add(targetListBox,gbc4);
//
//        GridBagConstraints gbc5 = new GridBagConstraints();
//        gbc5.gridy=0; gbc5.gridx=4;
//        // nowSelectText显示列表当前选择的模式，被定义为了属性，方便JComboBox的ActionListener设置text。
////        nowSelectText.setBounds(530,0,270,30);
//        nowSelectText.setText("当前选择："+targetListBox.getSelectedItem());
//        exploitPanel.add(nowSelectText,gbc5);

        //地址框
//        GridBagConstraints gbc6 = new GridBagConstraints();
//        gbc6.gridy=1; gbc6.gridx=0;
//        JPanel urlPanel=new JPanel(null);
//        urlPanel.setOpaque(true);
//        urlPanel.setBackground(Color.YELLOW);
//        urlPanel.setBorder(BorderFactory.createMatteBorder(1,0,0,0,new Color(203,208,209)));
//        exploitPanel.add(urlPanel,gbc6);

//
//        urlText.setBounds(10,0,40,30);
//        urlPanel.add(urlText);

//
//        urlField.setBounds(40,0,760,30);
//        urlPanel.add(urlField);

        //设置默认面板
//        DiyJComponent defaultExploitPanel = new PbootCMS();
//        exploitPanel.add(defaultExploitPanel.main());
        return exploitPanel;
    }

    private JComponent exploitTopPanel(){
        JPanel exploitTopPanel = new JPanel(new FlowLayout(FlowLayout.LEFT,0,0));
        exploitTopPanel.setOpaque(true);
        exploitTopPanel.setBackground(Color.ORANGE);

        JLabel typeText=new JLabel("   大类：");
        exploitTopPanel.add(typeText);

        String[] typeList ={"PHP","Java","Python","Nodejs","Other"};
        JComboBox<String> typeListBox = new JComboBox<>(typeList);
        exploitTopPanel.add(typeListBox);

        JLabel targetText=new JLabel("              小类：");
        exploitTopPanel.add(targetText);

         targetListBox = new JComboBox<>(targetList);
        exploitTopPanel.add(targetListBox);

        JLabel urlLabel=new JLabel("              地址：");
        exploitTopPanel.add(urlLabel);

        JTextField urlField = new JTextField();
        urlField.setPreferredSize(new Dimension(400,30));
        exploitTopPanel.add(urlField);

        return exploitTopPanel;
    }

    private JComponent exploitContentPanel(){
        JPanel exploitContentPanel = new JPanel();
        exploitContentPanel.setOpaque(true);
        exploitContentPanel.setBackground(Color.CYAN);

        return exploitContentPanel;

    }
    private void centerTopJComboBoxListener(JComboBox<String> tmpJComboBox){
        tmpJComboBox.addActionListener(e -> {
            JComboBox tmpComboBox = (JComboBox)e.getSource();
            String selectedItem =  (String) tmpComboBox.getSelectedItem();
            nowSelectText.setText("当前选择："+selectedItem);
//            System.out.println(selectedItem);
            if(!Objects.equals(selectedItem, null)){
//                System.out.println(selectedItem);
                switch (Objects.requireNonNull(selectedItem)){
                    case "ThinkPHP":
                        ThinkPHP();
                        break;
                    case "PbootCMS":
                        PbootCMS();
                        break;
                    case "Shiro":
                        Shiro();
                        break;
                    case "FastJson":
                        FastJson();
                        break;
                }
            }
        });
    }

    public void ThinkPHP(){
        System.out.println("ThinkPHP");
        setExploitPanel(exploitPanel,new ThinkPHP());
    }

    public void PbootCMS(){
        System.out.println("PbootCMS");
        setExploitPanel(exploitPanel,new PbootCMS());
    }

    public void Shiro(){
        System.out.println("Shiro");
    }

    public void FastJson(){
        System.out.println("FastJson");
    }

    private void setExploitPanel(JPanel exploitPanel, DiyJComponent willLoadedPanel){
        Component[] exploitPanelComponents=exploitPanel.getComponents();
//        System.out.println(exploitPanelComponents.length);
        if(exploitPanelComponents.length==7){
            exploitPanel.remove(6);
            exploitPanel.add(willLoadedPanel.main());
            exploitPanel.revalidate();
            exploitPanel.repaint();
        }
    }

}

