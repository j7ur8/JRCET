package jrcet.frame.exploit.php;

import jrcet.diycomponents.DiyJComponent;
import jrcet.diycomponents.DiyJButton;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class PbootCMS extends DiyJComponent {

    public PbootCMS() {
    }

    public JComponent main() {
        JPanel pbootPanel = new JPanel(new BorderLayout());
        pbootPanel.add(west(), BorderLayout.WEST);
        pbootPanel.add(center(), BorderLayout.CENTER);
        pbootPanel.add(east(), BorderLayout.EAST);
        return pbootPanel;
    }


    private JComponent west() {

        JPanel pbootPayloadListPanel = new JPanel(null);
        pbootPayloadListPanel.setPreferredSize(new Dimension(160, 493));
        pbootPayloadListPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));

        JLabel pbootPayloadLabel = new JLabel("Payloads", JLabel.CENTER);
        pbootPayloadLabel.setBounds(0, 0, 160, 30);
        pbootPayloadLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        pbootPayloadListPanel.add(pbootPayloadLabel);

        JList<String> pbootPayloadsList = new JList<>(new String[]{"PbootCMS v3.2", "PbootCMS v3.1", "PbootCMS v2.5"});
        DefaultListCellRenderer pbootPayloadsListCellRenderer = (DefaultListCellRenderer) pbootPayloadsList.getCellRenderer();
        pbootPayloadsListCellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        pbootPayloadsList.addMouseListener(new pbootPayloadsListMouseListener());

        JScrollPane pbootPayloadsListScroll = new JScrollPane(pbootPayloadsList);
        pbootPayloadsListScroll.setBounds(0, 30, 160, 461);
        pbootPayloadsListScroll.setBorder(null);
        pbootPayloadListPanel.add(pbootPayloadsListScroll);

        return pbootPayloadListPanel;
    }

    private JComponent center() {
        JPanel pbootAttackPanel = new JPanel(null);
        pbootAttackPanel.setBorder(BorderFactory.createMatteBorder(0, 1, 0, 1, new Color(200, 200, 200)));

        DiyJButton pbootAttackMessageButton = new DiyJButton("攻击日志");
        pbootAttackMessageButton.setBounds(150, 0, 60, 20);
        pbootAttackMessageButton.variablePanelMap.put(pbootAttackMessageButton.getText(), attackLog());
        /*设置当前按钮*/
        pbootAttackMessageButton.setBackground(new Color(251, 251, 251));
        pbootAttackMessageButton.clicked = true;

        pbootAttackPanel.add(pbootAttackMessageButton);
//        pbootAttackTopButtonListener(pbootAttackMessageButton);

        DiyJButton pbootAttackCodeExecuteButton = new DiyJButton("命令执行");
        pbootAttackCodeExecuteButton.setBounds(210, 0, 60, 20);
        pbootAttackCodeExecuteButton.variablePanelMap.put(pbootAttackCodeExecuteButton.getText(), executeCode());
        pbootAttackPanel.add(pbootAttackCodeExecuteButton);
//        pbootAttackTopButtonListener(pbootAttackCodeExecuteButton);

        DiyJButton pbootAttackUploadShellButton = new DiyJButton("上传木马");
        pbootAttackUploadShellButton.setBounds(270, 0, 60, 20);
        pbootAttackUploadShellButton.variablePanelMap.put(pbootAttackUploadShellButton.getText(), uploadShell());
        pbootAttackPanel.add(pbootAttackUploadShellButton);
//        pbootAttackTopButtonListener(pbootAttackUploadShellButton);

        pbootAttackPanel.add(attackLog());

        return pbootAttackPanel;
    }

    private JComponent east() {
        
        JPanel pbootMethodPanel = new JPanel(null);
        pbootMethodPanel.setPreferredSize(new Dimension(160, 493));

        JLabel pbootFunctionLabel = new JLabel("Functions", JLabel.CENTER);
        pbootFunctionLabel.setBounds(0, 0, 160, 30);
        pbootFunctionLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        pbootMethodPanel.add(pbootFunctionLabel);

        // top 漏洞检测、漏洞攻击
        JPanel pbootFunctionPanel = new JPanel(null);
        pbootFunctionPanel.setBounds(0, 30, 160, 461);
        pbootFunctionPanel.setOpaque(true);
        pbootFunctionPanel.setBackground(Color.WHITE);
        pbootMethodPanel.add(pbootFunctionPanel);

        DiyJButton pbootDetectButton = new DiyJButton("漏洞检测");
        pbootDetectButton.setBounds(0, 0, 80, 25);
        pbootDetectButton.setBackground(new Color(251, 251, 251));/*设置当前按钮*/
        pbootDetectButton.clicked = true;
        pbootDetectButton.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(255, 102, 51)));

        pbootDetectButton.variablePanelMap.put(pbootDetectButton.getText(), detectVul());
        pbootFunctionPanel.add(pbootDetectButton);

        DiyJButton pbootAttackButton = new DiyJButton("漏洞攻击");
        pbootAttackButton.setBounds(80, 0, 80, 25);
        pbootAttackButton.variablePanelMap.put(pbootAttackButton.getText(), attackVul());
        pbootFunctionPanel.add(pbootAttackButton);


        pbootFunctionPanel.add(detectVul());

        return pbootMethodPanel;
    }


    private JComponent detectVul() {
        JPanel pbootDetectVulPanel = new JPanel(null);
        pbootDetectVulPanel.setBounds(0, 25, 160, 436);
        pbootDetectVulPanel.setOpaque(true);
        pbootDetectVulPanel.setBackground(Color.ORANGE);
        return pbootDetectVulPanel;
    }

    private JComponent attackVul() {
        JPanel pbootAttackVulPanel = new JPanel(null);
        pbootAttackVulPanel.setBounds(0, 25, 160, 436);
        pbootAttackVulPanel.setOpaque(true);
        pbootAttackVulPanel.setBackground(Color.YELLOW);
        return pbootAttackVulPanel;
    }

    private JComponent uploadShell() {
        JPanel pbootAttackVisualPanel = new JPanel(null);
        pbootAttackVisualPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
        pbootAttackVisualPanel.setBounds(1, 20, 478, 500);
        pbootAttackVisualPanel.setOpaque(true);
        pbootAttackVisualPanel.setBackground(Color.ORANGE);
        return pbootAttackVisualPanel;
    }

    private JComponent attackLog() {
        JPanel pbootAttackVisualPanel = new JPanel(null);
        pbootAttackVisualPanel.setBounds(1, 20, 478, 500); //铺满的话设置一个大于上层panel宽和高的值就好
        JTextArea pbootAttackLog = new JTextArea();
        pbootAttackLog.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
        pbootAttackLog.setBounds(0, 0, 500, 500);
        pbootAttackVisualPanel.add(pbootAttackLog);
        return pbootAttackVisualPanel;
    }

    private JComponent executeCode() {
        JPanel pbootAttackVisualPanel = new JPanel(null);
        pbootAttackVisualPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
        pbootAttackVisualPanel.setBounds(1, 20, 478, 500);
        pbootAttackVisualPanel.setOpaque(true);
        pbootAttackVisualPanel.setBackground(Color.YELLOW);
        return pbootAttackVisualPanel;
    }

    static class pbootPayloadsListMouseListener implements MouseListener {
        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mousePressed(MouseEvent e) {
            JList activeList = (JList) e.getSource();
            System.out.println(activeList.getSelectedValue());
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }

}