package jrcet.frame.exploit.php;

import jrcet.diycomponents.DiyJComponent;
import jrcet.diycomponents.DiyJButton;
import jrcet.diycomponents.DiyJLabel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class PbootCMS extends DiyJComponent {

    public PbootCMS() {
    }

    public JComponent main() {
        JPanel pbootPanel = new JPanel(new GridBagLayout());
        pbootPanel.setOpaque(true);
//        pbootPanel.setBackground(Color.white);

        GridBagConstraints westProperty = new GridBagConstraints();
        westProperty.gridy=0; westProperty.gridx=0;
        westProperty.weightx=0; westProperty.weighty=100;
        westProperty.fill = GridBagConstraints.BOTH;
        pbootPanel.add(west(),westProperty);

        GridBagConstraints centerProperty = new GridBagConstraints();
        centerProperty.gridy=0; centerProperty.gridx=1;
        centerProperty.weightx=100; centerProperty.weighty=100;
        centerProperty.fill = GridBagConstraints.BOTH;
        pbootPanel.add(center(),centerProperty);

        GridBagConstraints eastProperty = new GridBagConstraints();
        eastProperty.gridy=0; eastProperty.gridx=2;
        eastProperty.weightx=0; eastProperty.weighty=100;
        eastProperty.fill = GridBagConstraints.BOTH;
        pbootPanel.add(east(),eastProperty);

        return pbootPanel;
    }


    private JComponent west() {

        JPanel pbootPayloadListPanel = new JPanel(new BorderLayout());
        pbootPayloadListPanel.setOpaque(true);
//        pbootPayloadListPanel.setBackground();

        pbootPayloadListPanel.setPreferredSize(new Dimension(200, 0));

        pbootPayloadListPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
//
        JLabel pbootPayloadLabel = new JLabel("Payloads", JLabel.CENTER);
        pbootPayloadLabel.setBounds(0, 0, 160, 30);
        pbootPayloadLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        pbootPayloadListPanel.add(pbootPayloadLabel,BorderLayout.NORTH);

        JList<String> pbootPayloadsList = new JList<>(new String[]{"PbootCMS v3.2", "PbootCMS v3.1", "PbootCMS v2.5"});
        DefaultListCellRenderer pbootPayloadsListCellRenderer = (DefaultListCellRenderer) pbootPayloadsList.getCellRenderer();
        pbootPayloadsListCellRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        pbootPayloadsList.addMouseListener(new pbootPayloadsListMouseListener());

        JScrollPane pbootPayloadsListScroll = new JScrollPane(pbootPayloadsList);
        pbootPayloadsListScroll.setBounds(0, 30, 160, 0);
        pbootPayloadsListScroll.setBorder(null);
        pbootPayloadListPanel.add(pbootPayloadsListScroll,BorderLayout.CENTER);
//
        return pbootPayloadListPanel;
    }

    private JComponent center() {
        JPanel centerPanel = new JPanel(new GridBagLayout());
        centerPanel.setOpaque(true);
        centerPanel.setBackground(Color.white);
        centerPanel.setBorder(BorderFactory.createMatteBorder(0,1,0,1,new Color(203,208,209)));

        GridBagConstraints centerTopPanelProperty = new GridBagConstraints();
        centerTopPanelProperty.gridy=0; centerTopPanelProperty.gridx=1;
        centerTopPanelProperty.weightx=0; centerTopPanelProperty.weighty=0;
        centerTopPanelProperty.fill = GridBagConstraints.CENTER;
        centerPanel.add(centerTopPanel(),centerTopPanelProperty);

        GridBagConstraints centerTopLeftBorderPanelProperty = new GridBagConstraints();
        centerTopLeftBorderPanelProperty.gridy=0; centerTopLeftBorderPanelProperty.gridx=0;
        centerTopLeftBorderPanelProperty.weightx=100; centerTopLeftBorderPanelProperty.weighty=0;
        centerTopLeftBorderPanelProperty.fill = GridBagConstraints.BOTH;
        centerPanel.add(centerTopLeftBorderPanel(),centerTopLeftBorderPanelProperty);

        GridBagConstraints centerTopRightBorderPanelProperty = new GridBagConstraints();
        centerTopRightBorderPanelProperty.gridy=0; centerTopRightBorderPanelProperty.gridx=2;
        centerTopRightBorderPanelProperty.weightx=100; centerTopRightBorderPanelProperty.weighty=0;
        centerTopRightBorderPanelProperty.fill = GridBagConstraints.BOTH;
        centerPanel.add(centerTopRightBorderPanel(),centerTopRightBorderPanelProperty);

        GridBagConstraints defaultCenterPanelProperty = new GridBagConstraints();
        defaultCenterPanelProperty.gridy=1; defaultCenterPanelProperty.gridx=0;
        defaultCenterPanelProperty.weightx=100; defaultCenterPanelProperty.weighty=100;
        defaultCenterPanelProperty.fill = GridBagConstraints.BOTH;
        centerPanel.add(attackLog(),defaultCenterPanelProperty);

        return centerPanel;
    }

    private JComponent east() {
        
        JPanel pbootMethodPanel = new JPanel(new BorderLayout());
        pbootMethodPanel.setPreferredSize(new Dimension(160, 0));
        pbootMethodPanel.setOpaque(true);
        pbootMethodPanel.setPreferredSize(new Dimension(160, 0));

        JLabel pbootFunctionLabel = new JLabel("Functions", JLabel.CENTER);
        pbootFunctionLabel.setBounds(0, 0, 160, 30);
        pbootFunctionLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(200, 200, 200)));
        pbootMethodPanel.add(pbootFunctionLabel,BorderLayout.NORTH);

        JPanel pbootFunctionPanel = new JPanel(new BorderLayout());
        pbootFunctionPanel.setBounds(0, 30, 160, 0);
        pbootFunctionPanel.setOpaque(true);
        pbootFunctionPanel.setBackground(Color.YELLOW);
        pbootMethodPanel.add(pbootFunctionPanel,BorderLayout.CENTER);

        JPanel pbootFunctionTopPanel = new JPanel(null);
        pbootFunctionTopPanel.setPreferredSize(new Dimension(30,25));
        pbootFunctionPanel.add(pbootFunctionTopPanel,BorderLayout.NORTH);

        DiyJButton pbootDetectButton = new DiyJButton("漏洞检测");
        pbootDetectButton.setBounds(0, 0, 80, 25);
        pbootDetectButton.clicked = true;
        pbootDetectButton.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, new Color(255, 102, 51)));
        pbootDetectButton.variablePanelMap.put(pbootDetectButton.getText(), detectVul());
        pbootFunctionTopPanel.add(pbootDetectButton);

        DiyJButton pbootAttackButton = new DiyJButton("漏洞攻击");
        pbootAttackButton.setBounds(80, 0, 80, 25);
        pbootAttackButton.variablePanelMap.put(pbootAttackButton.getText(), attackVul());
        pbootFunctionTopPanel.add(pbootAttackButton);


        pbootFunctionPanel.add(detectVul(),BorderLayout.CENTER);

        return pbootMethodPanel;
    }

    private JComponent centerTopLeftBorderPanel(){
        JPanel centerTopLeftBorderPanel = new JPanel();
        centerTopLeftBorderPanel.setOpaque(true);
        centerTopLeftBorderPanel.setBackground(Color.YELLOW);
        centerTopLeftBorderPanel.setBorder(BorderFactory.createMatteBorder(0,0,1,0,new Color(203,208,209)));

        return centerTopLeftBorderPanel;
    }

    private JComponent centerTopRightBorderPanel(){
        JPanel centerTopRightBorderPanel = new JPanel();
        centerTopRightBorderPanel.setOpaque(true);
        centerTopRightBorderPanel.setBackground(Color.YELLOW);
        centerTopRightBorderPanel.setBorder(BorderFactory.createMatteBorder(0,0,1,0,new Color(203,208,209)));

        return centerTopRightBorderPanel;
    }

    private JComponent centerTopPanel(){
        JPanel centerTopPanel = new JPanel(new FlowLayout(FlowLayout.CENTER,0,0));
        centerTopPanel.setOpaque(true);
        centerTopPanel.setBackground(Color.YELLOW);

        DiyJLabel pbootAttackMessageButton = new DiyJLabel("攻击日志");
        pbootAttackMessageButton.clicked = true;
        pbootAttackMessageButton.setMapPanel(attackLog());
        pbootAttackMessageButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0,new Color(203,208,209)));
        centerTopPanel.add(pbootAttackMessageButton);

        DiyJLabel pbootAttackCodeExecuteButton = new DiyJLabel("命令执行");
        pbootAttackCodeExecuteButton.setMapPanel(codeExecute());
        pbootAttackCodeExecuteButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0,new Color(203,208,209)));
        centerTopPanel.add(pbootAttackCodeExecuteButton);

        DiyJLabel pbootAttackUploadShellButton = new DiyJLabel("上传木马");
        pbootAttackUploadShellButton.setMapPanel(uploadShell());
        pbootAttackUploadShellButton.setBorder(BorderFactory.createMatteBorder(0,0,1,0,new Color(203,208,209)));
        centerTopPanel.add(pbootAttackUploadShellButton);

        return centerTopPanel;
    }

    private JComponent detectVul() {
        JPanel pbootDetectVulPanel = new JPanel();
        pbootDetectVulPanel.setOpaque(true);
        pbootDetectVulPanel.setBackground(Color.ORANGE);
        return pbootDetectVulPanel;
    }

    private JComponent attackVul() {
        JPanel pbootAttackVulPanel = new JPanel(null);
        pbootAttackVulPanel.setBounds(0, 25, 160, 0);
        pbootAttackVulPanel.setOpaque(true);
        pbootAttackVulPanel.setBackground(Color.YELLOW);
        return pbootAttackVulPanel;
    }

    private JComponent uploadShell() {
        JPanel pbootAttackVisualPanel = new JPanel(null);
        pbootAttackVisualPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
        pbootAttackVisualPanel.setBounds(1, 20, 478, 0);
        pbootAttackVisualPanel.setOpaque(true);
        pbootAttackVisualPanel.setBackground(Color.ORANGE);
        return pbootAttackVisualPanel;
    }

    private JComponent attackLog() {
        JPanel pbootAttackVisualPanel = new JPanel(new BorderLayout());
        JTextArea pbootAttackLog = new JTextArea();
        pbootAttackLog.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
        pbootAttackLog.setBounds(0, 0, 500, 500);
        pbootAttackVisualPanel.add(pbootAttackLog,BorderLayout.CENTER);
        return pbootAttackVisualPanel;
    }

    private JComponent codeExecute() {
        JPanel pbootAttackVisualPanel = new JPanel(null);
        pbootAttackVisualPanel.setBorder(BorderFactory.createMatteBorder(0, 0, 0, 0, new Color(200, 200, 200)));
        pbootAttackVisualPanel.setBounds(1, 20, 478, 0);
        pbootAttackVisualPanel.setOpaque(true);
        pbootAttackVisualPanel.setBackground(Color.YELLOW);
        return pbootAttackVisualPanel;
    }

    static class pbootPayloadsListMouseListener implements MouseListener {
        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mousePressed(MouseEvent e) {
            JList activeList = (JList) e.getSource();
            System.out.println(activeList.getSelectedValue());
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }
    }

}